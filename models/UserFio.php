<?php

namespace app\models;

use Yii;
use app\models\user\User;
use yii\web\UploadedFile;
use moonland\phpexcel\Excel;

/**
 * This is the model class for table "user_fio".
 *
 * @property int $id
 * @property string $user_f
 * @property string $user_i
 * @property string $user_o
 * @property string $date_add
 * @property string $date_update
 * @property mixed $file
 * @property array $excel_data;
 */
class UserFio extends \yii\db\ActiveRecord
{

    public $file;
    public $excel_data;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'user_fio';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['file'], 'file', 'skipOnEmpty' => true, 'extensions' => 'xls,xlsx,csv'],
            [['user_f', 'user_i', 'user_o'], 'string', 'max' => 255],
            [['user_f', 'user_i', 'user_o'], 'required'],
            //[['user_f','user_i','user_o'],'unique', 'targetAttribute' => ['user_f','user_i','user_o']],
            [['user_f', 'user_i', 'user_o'], 'get_find_all_fio'],
            [['date_add','date_update'],'safe'],
        ];
    }


    public function get_find_all_fio(){
        if (!$this->id) {
            if (self::find()->where(['user_f'=>trim($this->user_f),'user_i'=>trim($this->user_i),'user_o'=>trim($this->user_o)])->exists()) {
                $msg = 'Сочетание Фамилия Имя Отчество должно быть уникальными. Проверьте текущие списки!';
                $this->addError('user_f', $msg);
                $this->addError('user_i', $msg);
                $this->addError('user_o', $msg);
                return FALSE;
            }
        } else {
            if (self::find()->where(['user_f'=>trim($this->user_f),'user_i'=>trim($this->user_i),'user_o'=>trim($this->user_o)])->andWhere(' id != "'.$this->id.'"')->exists()) {
                $msg = 'Сочетание Фамилия Имя Отчество должно быть уникальными. Проверьте текущие списки других пользователей!';
                $this->addError('user_f', $msg);
                $this->addError('user_i', $msg);
                $this->addError('user_o', $msg);
                return FALSE;
            }

        }

        return TRUE;
    }

    public function beforeSave($insert)
    {


        $this->getExcelData();


        if($this->isNewRecord){

            $this->user_f = (!empty($this->user_f)) ? trim($this->user_f) : '';
            $this->user_i = (!empty($this->user_i)) ? trim($this->user_i) : '';
            $this->user_o = (!empty($this->user_o)) ? trim($this->user_o) : '';
            $this->date_add = User::getNowDate();
        } else {
            $this->date_update = User::getNowDate();
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * Получаем данные из EXCEL
     */
    public function getExcelData(){
        $this->file = UploadedFile::getInstance($this, 'file');
        if ($this->file) {
            $fileName = $this->file->tempName;

            $data = Excel::widget([
                'mode' => 'import',
                'fileName' => $fileName,
                'setFirstRecordAsKeys' => true,
                //'setIndexSheetByName' => true,
                //'getOnlySheet' => 'Лист1',
            ]);
            if ($data) {
                $this->excel_data = $data;
            }
        }
    }


    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'user_f' => 'Фамилия',
            'user_i' => 'Имя',
            'user_o' => 'Отчество',
            'file' => 'Поле для загрузки/обновления данных из Excel/CSV файла',
            'date_add'=> 'Дата создания',
            'date_update'=>'Дата обновления',
        ];
    }

    public function getUser_name(){
        return $this->user_f.' '.$this->user_i.' '.$this->user_o;
    }

    public function getShow(){
        if ($this->id && Pacient::find()->where(['user_fio_id'=>$this->id])->exists()) {
            return TRUE;
        }
        return FALSE;
    }
}
